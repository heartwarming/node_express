/*
*  mongodb学习笔记
*  https://docs.mongodb.com/manual/tutorial/getting-started/
*/

1.安装MongoDB
	- 安装MongDB
		https://www.mongodb.org/dl/win32
	- 配置环境变量
		C:\Program Files\MongoDB\Server\3.4\bin
	- 在c盘根目录
		-创建一个文件夹data
		-在data中创建一个文件夹db
		
	- 打开cmd命令行窗口
		-输入mongod 启动mongodb服务器
		
	- 在打开一个cmd窗口
		- 输入 mongo 连接mongodb ，出现 > 说明连接成功
		
	- 数据库（database）
		- 数据库的服务器（可以放n个数据库）
			- 服务器用来保存数据
			- mongo 用来启动那个服务器
		
		- 数据库的客户端
			- 客户端用来操作服务器，对数据进行增删改查的操作
			- mongo 用来启动客户端
			
	- 将MongoDB设置为系统服务，可以自动在后台启动，不需要每次手动启动(4.0以上版本自动设置为系统服务自启动)
		1.在c盘根目录创建data
			- 在data里创建db和log文件夹
		2.创建配置文件
			- 在目录 C:\Program Files\MongoDB\Server\3.4 下添加一个配置文件
			  mongod.cfg
		3.以管理员身份打开命令行窗口
		-网速限制，暂时不学
2.基本知识
	- 基本概念
		数据库（database）
		集合（集合（collection））起名字多为复数
		文档（document）
			- 在mongodb中，数据可和集合都不需要手动创建
			当我们创建文档时，如果文档所在的集合或数据库不存在会自动创建数据库和集合
			
	- 基本指令
		- show dbs/show databases 
			- 显示数据库
		- use 数据库名字 
			- 进入该数据库
		- db
			- 当前所处的数据库
		- show collections
			- 显示当前数据库的集合

3.操作数据库			
	- 数据库的CRUD的操作
		- 数据库中插入文档 （创建）
			1.db.集合名字.insert(document) 
				- 向集合中插入一个或多个文档
				- 如果插入数据没有_id属性，则数据库会自动为文档添加根据时间戳生成的_id属性来作为唯一标识。
				- 向集合中插入一个文档
					- 例子：向test数据库中的，stus集合中插入一个新的学生对象
						{name:'孙悟空',age:18,gender:'男'}
						db.stus.insert({name:'孙悟空',age:18,gender:'男'})
					ps：在cmd中敲入db.stus.insert({name:'孙悟空',age:18,gender:'男'}) => 括号大括号({})
				- 向集合中插入多个文档
					- 例子：向test数据库中的，stus集合中插入一个新的学生对象
						{name:'孙悟空',age:18,gender:'男'}
						db.stus.insert([{name:'孙悟空',age:18,gender:'男'},{name:'猪八戒',age:16,gender:'男'}])
						
			2.db.集合名字.insertOne(document) 
			3.db.集合名字.insertMany(document)
			
		- 数据库中查询文档 （查询）
			1.db.集合名字.find()  => 返回的其实是个数组 ，可以通过索引取值
				- find()用来查询集合中所有的
				- find()可以接收一个对象作为条件参数
					find({}) 传一个空对象 也表示查询所有的
					find({name:'11'}) 查询属性是指定属性值的文档
					
				db.集合名字.find().count()  => 统计所有文档的数量
				db.集合名字.find().length() => 统计所有文档的数量
			2.db.集合名字.findOne()    => 返回的其实是一个对象
		
		- 数据库中修改文档 （修改）
			1.db.集合名字.update(查询条件，修改为新对象，配置选项(不常用))
				- update()默认会使用新对象替换旧的对象
				- 如果需要修改指定属性，而不是想要替换需要使用修改操作符
				- $set 		可以用来修改指定属性
				- $unset 	可以用来删除指定属性
				
				ps：update() 如果查出多个，默认只改第一个，可以通过传入第三个参数配置选项配置实现修改多个
			
			2.db.集合名字.updateOne(查询条件，修改为新对象)	
			3.db.集合名字.updateMany(查询条件，修改为新对象)	根据查询条件查询出多个，updateMany会修改多个
			4.db.集合名字.replaceOne(查询条件，修改为新对象)	
		
		- 数据库中删除文档 （删除）  
			1.db.集合名字.remove() 
				- remove({})删除符合条件的所有文档，如果不传{}会报错，find()方法不传{}也可以
				- 如果只想删除一个，添加第二个参数设置为true
			2.db.集合名字.deleteOne()	
			3.db.集合名字.deleteMany()
			
		- 数据库中删除集合
			- db.集合名字.drop();
		
		- 数据库删除
			- db.dropDatabase();
			
		- 番外篇	
			- 响应用户的删除功能，在数据库中并没有真实删除，只是加了标志位，做查询数据的时候不显示出来而已。
			

4.数据库中文档之间的关系
	- 一对一
		例子:
			- 夫和妻
			- 在mongodb中内嵌文档
				db.wifeAndHusband.insert(
					{
						name:"黄蓉",
						husband:{
							name:"郭靖"
						}
					}
				)
			
	- 一对多/多对一
		例子:
			- 用户和订单
				- 绑定
					订单的表可以通过用户的唯一标识绑定用户
				- 查询
					去订单里使用用户唯一标识作为条件查找用户的订单数据
	- 多对多
		例子:
			- 分类和商品
		
5.数据库中查询操作符 （https://docs.mongodb.com/manual/reference/operator/query-comparison/）
	- $gt 大于
	- $gte 大于等于
	- $lt 小于
	- $lte 小于等于
	- $eq 等于
	- $ne 不等于	
		
6.数据库中分页用的函数
	- limit() 设置显示数据的上限
	- skip()  跳过指定数量的数据
	- skip((页码-1)*每页显示条数).limit(每页显示条数);
	
	MongoDB会自动调整skip()和limit()的执行顺序，谁写在前面都行。
	
7.数据库中文档的排序
	- 默认按照_id的值升序排序(创建时间排序)
	- sort({属性:n,属性:n}), n=1 升序; n=-1 降序 
	- 如果排序条件为多个，按照层层递进排序
	- limit skip sort 可以任意顺序书写

8.投影
	- 在查询数据时，比如你只想显示每条数据的一个属性时，可以在第二个参数的位置设置查询结果的投影
	- db.stus.find({},{name:1}) 
	- 表示每条数据只显示name字段

9.索引
	- 索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。
	- 这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。
	- 索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构。
	- createIndex()方法基本语法格式如下所示：
		- db.collection.createIndex(keys, options)
		- Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。
			- 实例
				db.col.createIndex({"title":1})
		- createIndex()方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。
		- db.col.createIndex({"title":1,"description":-1})
	
		- 1、查看集合索引
			- db.col.getIndexes()
		- 2、查看集合索引大小
			- db.col.totalIndexSize()
		- 3、删除集合所有索引
			- db.col.dropIndexes()
		- 4、删除集合指定索引
			- db.col.dropIndex("索引名称")

10.MongoDB 聚合管道
	- MongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。
	- 语法
		- aggregate() 方法的基本语法格式如下所示：
		- db.集合名字.aggregate(AGGREGATE_OPERATION)
	- 常见管道操作符
		- $project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。
		- $match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。
		- $limit：用来限制MongoDB聚合管道返回的文档数。
		- $skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。
		- $unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。
		- $group：将集合中的文档分组，可用于统计结果。
		- $sort：将输入文档排序后输出。
		- $geoNear：输出接近某一地理位置的有序文档。	
		
			- 实例详细见 https://www.runoob.com/mongodb/mongodb-aggregate.html

	- 使用场景
		- 表的关联查询
		- 数据统计




		
	
/*
*  mongoose学习笔记
*  https://mongoosejs.com/docs/index.html
*/	
	
1.Mongoose 	(https://mongoosejs.com/docs/guide.html)
	- 简介
		- 之前我们都是通过shell来完成对数据库的操作，在实际开发中，我们需要用程序控制数据的变化。
		- Mongoose作为node的模块可以让我们通过node来操作MongoDB。Mongoose是一个对象文档模型(ODM)库，它是对
		- node的原生模块mogodb(也可以操作MongoDB)进行了更进一步的优化封装，并且提供了更多功能。
		- 大多数情况下，它被用来把结构化的模式应用到一个MongoDB集合，并且提供了验证和类型转换等好处。
		- 让我们以对象的方式操作数据库。
		
	- 好处
		1.可以为文档创建一个模式结构(Schema)
		2.可以对模型中的对象/文档进行验证
		3.数据可以通过类型转换为对象模型
		4.可以使用中间件来与应用业务逻辑挂钩
		5.比NOde原生的mogodb驱动更容易

	- 新的对象
		- Schema
			- Schema对象定义约束了数据库中的文档结构
				- 预定义模式修饰符
					- trim lowercase uppercase
				- 自定义模式修饰符
					- Getters  Setters
		- Model
			- Model对象作为集合中所有文档的表示，相当于MongoDB数据库中的集合
		- Document
			- Document表示集合中的具体文档，相当于集合中一个具体的文档
		
	- 使用Mongoose
		- 1.安装
			- npm install mongoose --save
		- 2.在项目中引入
			- var mongoose = require('mongoose');
		- 3.连接MongoDB数据库
			- mongoose.connect('mongodb://数据库的IP地址:端口号/数据库名称',{useMongiClient:true});
			- 如果端口号默认(27017)，则可以省略不写
		- 4.断开数据库连接(一般不需要使用)
			- mongoose.disconnect();
			
			
			- 监听MongoDB数据库的连接状态
				- 在mongoose对象中，有一个属性叫做connection,该对象标识的是数据库连接
					通过监视该对象的状态，可以监听数据库的连接和断开
					
				数据库连接成功的事件
				mongoose.connection.once('open',function(err){});
				
				数据库连接失败的事件
				mongoose.connection.once('close',function(err){});
		
2.mongoose多表关联查询		
		
		
		
		
		
		
		